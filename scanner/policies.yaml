---
access-keys-rotate-90-days:
  name: Ensure access keys are rotated every 90 days or less
  description: 'Rotating access keys is a security best practice to reduce the likelihood of account compromise.'
  links: 
    - 'https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=18'
    - 'https://aws.amazon.com/blogs/security/how-to-rotate-access-keys-for-iam-users/'
  references: 
    - AWS CIS v.1.4.0 - 1.14
    - AWS CIS v.1.2.0 - 1.4
    - ISO27001:2013 - A.9.2.4
  remediation: 'Follow [AWS Best practices](https://aws.amazon.com/blogs/security/how-to-rotate-access-keys-for-iam-users/) to rotate access keys.'
  vulnerability: 'Aging access keys, just like passwords, need to be rotated to reduce the risk of credentials leaking to unauthorised users, resulting in account compromise.'
  rating: Medium
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>`]"
    fields: "{ UserName : user , access_key_1_active: access_key_1_active, access_key_1_last_rotated : access_key_1_last_rotated, _access_key_1_last_rotated_age: _access_key_1_last_rotated_age, access_key_2_active: access_key_2_active, access_key_2_last_rotated : access_key_2_last_rotated , _access_key_2_last_rotated_age: _access_key_2_last_rotated_age}"
  policy: "[?( access_key_1_active == 'true' && _access_key_1_last_rotated_age > `90` ) ||  ( access_key_2_active == 'true' && _access_key_2_last_rotated_age > `90` )  ]"

ec2-instance-with-public-ip:
  links: 
    - https://aws.amazon.com/architecture/well-architected/
  description: 'EC2 instances with public IP addresses are more exposed to the internet.  Even when a system only has limited ports open, the protection then shifts to the application.'
  name: EC2 instance with Public IP
  rating: Info
  remediation: 'Implement a secure design, placing all EC2 instances in private subnets, and segregate the internet access with a load balancer and (or) a WAF'
  vulnerability: 'By not restricting an EC2 instance behind a load balancer, the entire subnet is being put at risk in the event of a system or application compromise.'
  references:
    - ISO27001:2013 - A.13.1.1
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: ec2.describe_instances
    flatten: Instances
    filter: "[?State.Name == 'running']"
    fields: "{InstanceId : InstanceId , AvailabilityZone : Placement.AvailabilityZone, PublicIpAddress : PublicIpAddress, Region : _region }"
  policy: "[?PublicIpAddress != `null`]"  # check for what is not compliant

eliminate-root-user-usage:
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=11
  description: 'The [root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html) is the highest privileged, unrestricted account within your AWS landscape.  Because of the sensitivity of this account, it should not be used for normal day-to-day operations.'
  name: Eliminate use of the root user for administrative and daily tasks
  rating: High
  references: 
    - AWS CIS v1.4.0 - 1.7
    - AWS CIS v1.2.0 - 1.1
    - ISO27001:2013 - A.9.2.3
  remediation: 'Avoid using the root account, and [create a seperate IAM user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) with the least-privilege policies applied.'
  vulnerability: 'The root account represents unrestricted access to the entire account.  A compromise of the root account will mean a complete loss control of the account.  This can result in data leakage, or rogue resources being created (for example bitcoin mining), at the account owner''s expense.'
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user == `<root_account>`]"
    fields: "{ UserName : user , password_last_used : password_last_used, _password_last_used_age: _password_last_used_age }"
  policy: "[?_password_last_used_age < `90`]"

iam-central-managed-users:
  name: Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments
  description: In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations
  rating: Low
  vulnerability: Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.
  remediation: 'Follow the [AWS best practices](https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html) to setup SSO.'
  links:
    - https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html
  references:
    - AWS CIS v.1.4.0 - 1.21
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>`]"
    fields: "{ UserName : user , password_enabled : password_enabled , password_last_used : password_last_used }"
  policy: "[?password_enabled == 'true']"

iam-users-without-mfa:
  name: Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password
  description: MFA (or [multi factor authentication](https://en.wikipedia.org/wiki/Multi-factor_authentication)) refers to using an additional factor (like a securityfob or a one-time password), in addition to the regular username and passwordto gain access to an account.
  rating: High
  vulnerability: Without MFA, there is a higher probability of the account being compromised.
  remediation: 'Follow the [AWS best practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html) to configure MFA on your root account.'
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=13
  references:
    - AWS CIS v.1.4.0 - 1.10
    - AWS CIS v.1.2.0 - 1.2
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>` && password_enabled == 'true']"
    fields: "{ UserName : user , mfa_active : mfa_active , password_last_used : password_last_used }"
  policy: "[?mfa_active != 'true']"

lambda-depreciated-runtimes:
  name: Lambda functions with depreciated runtimes
  description: Lambda will no longer apply security patches and other updates to the runtime used by Lambda functions. In addition, functions using the runtime will no longer be eligible for technical support. You will no longer be able to create new Lambda functions using the runtime.
  rating: Medium
  vulnerability: AWS strongly recommends that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/lambda/latest/dg/configuration-console.html) to update the Lambda runtime.'
  links:
    - https://docs.aws.amazon.com/lambda/latest/dg/runtime-support-policy.html
  created: 2022-01-19
  updated: 2022-01-19
  references:
    - ISO27001:2013 - A.12.6.1
  asset:
    path: lambda.list_functions
    fields: " { FunctionName : FunctionName, Runtime : Runtime, Region : _region } "
  policy : "[?Runtime == `nodejs10.x` || Runtime == `ruby2.5` || Runtime == `python2.7` || Runtime == `nodejs8.10` || Runtime == `nodejs6.10` || Runtime == `nodejs4.3-edge` || Runtime == `nodejs4.3` || Runtime == `nodejs` || Runtime == `dotnetcore2.0` || Runtime == `dotnetcore1.0`]"

root-account-access-key:
  name: Ensure no root account access key exists
  description: '[Access keys](https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html) allow programatic access to your AWS account. When theaccess keys are not well protected, it can allow unauthorised access to yourAWS account.'
  rating: Critical
  vulnerability: 'Access keys provide access to the AWS account without having to use a password or multi-factor authentication.  They can end up in source code, and pose a significant risk if not managed correctly.'
  remediation: 'Remove the root access keys.'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=34
    - https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html
  references:
    - AWS CIS v.1.4.0 - 1.4
    - AWS CIS v.1.2.0 - 1.12
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user == `<root_account>`]"
    fields: "{ UserName : user , access_key_1_active : access_key_1_active, access_key_2_active : access_key_2_active }"
  policy: "[? access_key_1_active == 'true' || access_key_2_active == 'true' ]"

root-account-without-mfa:
  name: Ensure MFA is enabled for the root account
  description: 'The [root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html) is the highest privileged, unrestricted account within your AWSlandscape. It has to be securely protected.'
  rating: Critical
  vulnerability: 'MFA (or [multi factor authentication](https://en.wikipedia.org/wiki/Multi-factor_authentication)) refers to using an additional factor (like a securityfob or a one-time password), in addition to the regular username and passwordto gain access to an account. This reduces the likelihood of the account beingcompromised due to the loss of the root username and password.'
  remediation: 'Follow the [AWS bestpractices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa) to configure MFA on your root account.'
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-root
    - https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/#Security
  references:
    - AWS CIS v.1.4.0 - 1.5
    - AWS CIS v.1.2.0 - 1.13
    - Trusted Advisor - Multi-factor authentication on root account
    - ISO27001:2013 - A.9.2.3
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user == `<root_account>`]"
    fields: "{ UserName : user , mfa_active : mfa_active }"
  policy: "[?mfa_active == 'false' ]"

subnets-issue-public-ip:
  name: Subnets should not issue public IP addresses
  description: Defence-in-depth suggests that multiple security controls must be implemented to properly protect a system.  Removing the assignment of public IP addresses is one strategy that can be deployed to reduce the risk.</p><p>By allocating public IP addresses in subnets, any new system being created (database or EC2 instance) could inadvertantly be exposed to the public internet.</p><p>Instead of simply giving EC2 instances public IP addresses, the solution must be designed in a way to utilize load balancers instead.  Note that the subnet where you place a load balancer will need to have the ability to issue public IP addresses. Consider creating a load balancer with a public IP before you remove the functionality.
  rating: Info
  vulnerability: Automated issuing of public IP addresses increases the risk of internet exposure to your instances.
  remediation: 'Execute the [remediation script](https://github.com/massyn/aws-security/blob/main/remediation/remediate_subnets_with_public_ip_assignment.py)within your AWS account to remediate all subnets. **WARNING:** The script will cause all subnets in all regions to stop issuingpublic IP addresses. If you need this functionality for things likeautoscaling, this script can potentially break your solution.'
  references:
    - ISO27001:2013 - A.13.1.1
  links:
    - https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html#AddaSubnet
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: ec2.describe_subnets
    fields: "{ SubnetId :SubnetId, AvailabilityZone : AvailabilityZone, MapPublicIpOnLaunch: MapPublicIpOnLaunch, Region : _region }"
  policy: "[?MapPublicIpOnLaunch == `true`]"

two-active-access-keys:
  name: Ensure there is only one active access key available for any single IAM user
  description: Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).
  rating: High
  vulnerability: Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.
  remediation: 'Follow [AWS Bestpractices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html) to remove unused credentials' 
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html
  references:
    - AWS CIS v.1.4.0 - 1.13
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>`]"
    fields: "{ UserName : user , access_key_1_active : access_key_1_active, access_key_1_last_used_date : access_key_1_last_used_date, access_key_2_active : access_key_2_active, access_key_2_last_used_date : access_key_2_last_used_date }"
  policy: "[? access_key_1_active == 'true' && access_key_2_active == 'true' ]"

unused-credentials:
  name: Ensure credentials unused for 45 days or greater are disabled
  description: Credentials refer to passwords or access keys.
  rating: High
  vulnerability: Unused credentials indicate a user account that may not be in use.  Accounts that are not in use should be removed to reduce the risk of account compromise.
  remediation: 'Follow [AWS Bestpractices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html) to remove unused credentials' 
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=16
  references:
    - AWS CIS v.1.4.0 - 1.12
    - ISO27001:2013 - A.9.2.1
    - ISO27001:2013 - A.9.2.2
    - ISO27001:2013 - A.9.2.5
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>`]"
    fields : "{ UserName : user , password_last_used : password_last_used, access_key_1_last_used_date : access_key_1_last_used_date, access_key_2_last_used_date : access_key_2_last_used_date }"
  policy: "[?(password_enabled == 'true' && ( _password_last_used_age > `45` || _password_last_used_age == `-1`)) || (access_key_1_active == 'true' && ( _access_key_1_last_used_date_age> `45` || _access_key_1_last_used_date_age== `-1`)) || (access_key_2_active == 'true' && ( _access_key_2_last_used_date_age> `45` || _access_key_2_last_used_date_age== `-1`)) ]"

iam-console-users-with-access-keys:
  name: Do not setup access keys during initial user setup for all IAM users that have a console password
  description: IAM users can have multiple credentials, for example passwords, or access keys.
  rating: High
  vulnerability: Access to the AWS account needs to be restricted to avoid the account being compromised.  While having an access key is not strictly an issue, having access keys, and a console password would raise concerns on the multiple ways a user can gain access to the system, resulting in a potential breach if the credentials are not properly managed.  <b>Note</b> that while AWS CIS v.1.20 is specifically checking access keys created with user created, AWS Security Info will check for any console user that also has access keys.
  remediation: To remediate this issue, either remove the console password, or remove the access keys.
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=54
  references:
    - AWS CIS v.1.4.0 - 1.11
    - AWS CIS v.1.2.0 - 1.21
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user != `<root_account>`]"
    fields: "{ UserName : user , access_key_1_active : access_key_1_active, access_key_2_active : access_key_2_active }"
  policy: "[? password_enabled == 'true' && ( access_key_2_active == 'true' || access_key_2_active == 'true' ) ]"

root-account-without-hardware-mfa:
  name: Ensure hardware MFA is enabled for the root account
  description: Protecting the root account with a hardware MFA token to increase security with protecting the credentials.
  rating: High
  vulnerability: 'MFA (or [multi factor authentication](https://en.wikipedia.org/wiki/Multi-factor_authentication)) refers to using an additional factor (like a securityfob or a one-time password), in addition to the regular username and passwordto gain access to an account. This reduces the likelihood of the account beingcompromised due to the loss of the root username and password.'
  remediation: 'Follow the [AWS bestpractices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa) to configure MFA on your root account.'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=38
  references:
    - AWS CIS v.1.4.0 - 1.6
    - AWS CIS v.1.2.0 - 1.14
    - ISO27001:2013 - A.9.2.3
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: iam.get_credential_report
    filter: "[?user == `<root_account>`]"
    fields: "{ UserName : user , mfa_active : mfa_active, list_virtual_mfa_devices : list_virtual_mfa_devices.SerialNumber  }"
  policy: "[? mfa_active == 'false' || ( mfa_active == 'true' && arn == list_virtual_mfa_devices.User.Arn )]"

iam-users-group-permissions:
  name: Ensure IAM Users Receive Permissions Only Through Groups
  description: Controlling access for users should be done through groups.
  rating: Low
  vulnerability: Attaching policies directly to user accounts will obfuscate the access a user will have, and can result in permission creep.
  remediation: 'Create IAM groups for each job function, and [add the users to thegroups](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_add-remove-users.html).'
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_add-remove-users.html
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=43
  references:
    - AWS CIS v.1.4.0 - 1.15
    - AWS CIS v.1.2.0 - 1.16
    - ISO27001:2013 - A.9.2.5
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_get_credential_report
    filter: "[?user != `<root_account>`]"
    fields: "{ user : user , _list_user_policies : _list_user_policies, _list_user_policies_count: _list_user_policies_count _list_attached_user_policies : _list_attached_user_policies , _list_attached_user_policies_count: _list_attached_user_policies_count}"
  policy : "[? _list_user_policies_count > `0` || _list_attached_user_policies_count > `0` ]"

iam-entities-with-admin-rights:
  name: IAM entities with Admin rights
  description: IAM users, groups, and roles should have least privilege defined in its execution role, and only be able to perform very specific tasks.       
  rating: High
  vulnerability: If a group with high level access is compromised, it has the potential to cause severe business disruption to the AWS account.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html) to restrict the roles.'
  created: 2022-01-19
  updated: 2022-01-19
  references:
    - ISO27001:2013 - A.9.2.3
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html
  asset:
    path: custom.iam_list_policies
    fields: "{ source : source, UserName : UserName, GroupName: GroupName, RoleName : RoleName, PolicyName : PolicyName, Entity : Entity, Effect: Effect, Action: Action, Resource: Resource }"
  policy : "[? Effect == `Allow` && Action == `*` && Resource == `*` ]"

external-accounts-with-access:
  name: IAM Roles with external access
  description: IAM Roles with external access describes that an external AWS account (potentially unknown to you) may have access to your account.
  rating: Medium
  vulnerability: An external account with access to your account could circumvent regular identify access management process, and gain unauthorised access to your account.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html) to restrict the roles.'
  references:
    - ISO27001:2013 - A.9.2.3
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_get_account_authorization_details_RoleDetailList
    fields: "{ RoleName: RoleName, RoleId: RoleId, Effect: Effect, Principal_AWS: Principal_AWS, Action: Action }"
  policy: "[? Effect == `Allow` && Action == `sts:AssumeRole` && Principal_AWS != null ]"

iam-entities-with-lambda-function-update-rights:
  name: IAM entities with access to update Lambda functions
  description: Any entity that is capable of updating a Lambda function is capable of potentially executing code running as the Lambda function.
  rating: Medium
  vulnerability: Privilege escalation issues could occur if an unauthorised user is able to update a Lambda function.
  remediation: Update the user or role permissions, by adjusting group memberships, or by adjusting the policies attached to the users, groups or roles.      
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
  created: 2022-01-19
  updated: 2022-01-19
  references:
    - ISO27001:2013 - A.9.4.1
  asset:
    path: custom.iam_list_policies
    fields: "{ source : source, UserName : UserName, GroupName: GroupName, RoleName : RoleName, PolicyName : PolicyName, Entity : Entity, Effect: Effect, Action: Action, Resource: Resource }"
  policy : "[? Effect == `Allow` && ( Action == `*` || Action == `lambda:*` || Action == `lambda:UpdateFunctionCode`) ]"

iam-entities-with-dynamodb-access:
  name: IAM entities with access to DynamoDB tables
  description: Any entity that is capable of updating a DynamoDB table is capable of potentially altering the integrity of data in the tables.
  rating: Medium
  vulnerability: Unauthorised access to DynamoDB tables can result in a loss of data (data breaches), or the modification of sensitive data.
  remediation: Update the user or role permissions, by adjusting group memberships, or by adjusting the policies attached to the users, groups or roles.      
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
  created: 2022-01-19
  updated: 2022-01-19
  references:
    - ISO27001:2013 - A.9.4.1
  asset:
    path: custom.iam_list_policies
    fields: "{ source : source, UserName : UserName, GroupName: GroupName, RoleName : RoleName, PolicyName : PolicyName, Entity : Entity, Effect: Effect, Action: Action, Resource: Resource }"
  policy : "[? Effect == `Allow` && ( Action == `*` || Action == `dynamodb:*` || Action == `dynamodb:GetItem` || Action == `dynamodb:GetRecords` || Action == `dynamodb:UpdateItem` || Action == `dynamodb:UpdateTable` || Action == `dynamodb:PutItem` || Action == `dynamodb:DeleteTable`) ]"

security-groups-with-exposed-admin-ports:
  name: Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports
  description: Security groups that are configured to allow port 22 (SSH) or 3389 (Remote Desktop) from the internet.
  rating: High
  vulnerability: Removing unfettered connectivity to remote console services, such as SSH or RDP, reduces a server's exposure to risk being compromised through brute force attacks.
  remediation: Restrict the incomping IP ranges of the security groups to a smaller IP range, or alternatively, remove the security group.
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=144
  references:
    - AWS CIS v.1.4.0 - 5.2
    - AWS CIS v.1.2.0 - 4.1
    - AWS CIS v.1.2.0 - 4.2
    - ISO27001:2013 - A.13.1.1
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.ec2_describe_security_groups
    fields: "{ _direction: _direction, GroupId: GroupId, GroupName: GroupName, FromPort: FromPort, ToPort: ToPort, IpProtocol: IpProtocol, IpRange: IpRange }"
  policy: "[? _direction == `IpPermissions` && ( IpRange == `0.0.0.0/0` || IpRange == `::/0` ) && ((FromPort <= `22` && ToPort >= `22`) || (FromPort <= `3389` && ToPort >= `3389`)) ]"

rds-must-be-encrypted:
  name: Ensure that encryption is enabled for RDS Instances
  description: Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.
  rating: Medium
  vulnerability: Databases are likely to hold sensitive and critical data, it is highly recommended to implement encryption in order to protect your data from unauthorized access or disclosure. With RDS encryption enabled, the data stored on the instance\'s underlying storage, the automated backups, read replicas, and snapshots, are all encrypted.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html) to enable database encryption.         '
  links:
    - https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html
    - https://aws.amazon.com/blogs/database/selecting-the-right-encryption-options-for-amazon-rds-and-amazon-aurora-database-engines/
    - https://aws.amazon.com/rds/features/security/
  references:
    - AWS CIS v.1.4.0 - 2.3.1
    - ISO27001:2013 - A.10.1.1
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: rds.describe_db_instances
    fields: "{ StorageEncrypted: StorageEncrypted, DBInstanceIdentifier: DBInstanceIdentifier, DbiResourceId:DbiResourceId, Engine:Engine }"
  policy: "[? StorageEncrypted != `true` ]"

cloudtrail-logs-encrypted:
  name: Ensure CloudTrail logs are encrypted at rest using KMS CMKs
  description: AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.
  rating: Low
  vulnerability: Configuring CloudTrail to use SSE-KMS provides additional confidentiality controls on log data as a given user must have S3 read permission on the corresponding log bucket and must be granted decrypt permission by the CMK policy.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/encrypting-cloudtrail-log-files-with-aws-kms.html) to enable S3 encryption.'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=78
    - https://docs.aws.amazon.com/awscloudtrail/latest/userguide/encrypting-cloudtrail-log-files-with-aws-kms.html
  references:
    - AWS CIS v.1.4.0 - 3.7
    - AWS CIS v.1.2.0 - 2.7
    - ISO27001:2013 - A.12.4.2
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: cloudtrail.describe_trails
    fields: "{ Name: Name, KmsKeyId: KmsKeyId, _region: _region}"
  policy: "[? KmsKeyId == `null` ]"

cloudtrail-logfile-validation:
  name: Ensure CloudTrail log file validation is enabled
  description: Enabling log file validation will provide additional integrity checking of CloudTrail logs.
  rating: Low
  vulnerability: Without log file validation, there is a higher liklihood of regulatory compliance findings related to audit logging.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html)  to enable log file validation.         '
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=64
    - https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html
  references:
    - AWS CIS v.1.4.0 - 3.2
    - AWS CIS v.1.2.0 - 2.2
    - ISO27001:2013 - A.12.4.2
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: cloudtrail.describe_trails
    fields: "{ Name: Name, LogFileValidationEnabled: LogFileValidationEnabled, _region: _region}"
  policy: "[? LogFileValidationEnabled != `true` ]"

cloudtrail-enabled:
  name: Ensure CloudTrail is enabled in all regions
  description: The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing.
  rating: Medium
  vulnerability: Without proper logging of AWS API activity, any activity, be it malicious, or legitimate will go undetected, resulting in breaches, or lack of regulatory compliance.
  remediation: Follow <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html">AWS Best Practices</a> to create a new trail.
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=61
    - https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html
    - https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/#Security
  references:
    - AWS CIS v.1.4.0 - 3.1
    - AWS CIS v.1.2.0 - 2.1
    - Trusted Advisor - AWS Cloudtrail logging
    - ISO27001:2013 - A.12.4.1
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.cloudtrail_describe_trails
    fields: "{ Name: Name, _region: _region, IsMultiRegionTrail: IsMultiRegionTrail, get_trail_status_IsLogging: get_trail_status_IsLogging, get_event_selectors_IncludeManagementEvents : get_event_selectors_IncludeManagementEvents, get_event_selectors_ReadWriteType: get_event_selectors_ReadWriteType}"
  policy: "[? IsMultiRegionTrail != `true` && get_trail_status_IsLogging != `true` && get_event_selectors_IncludeManagementEvents != `true` && get_event_selectors_ReadWriteType != `All` ]"

ssm-agent-active:
  name: Ensure SSM is enabled on all EC2 instances
  description: AWS Systems Manager allows for the management of EC2 instances, allowing you to scale operations like patching across the entire EC2 fleet.    
  rating: Low
  vulnerability: By not having SSM, operational teams will spend manual effort to patch and manage the environment.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html) to install the AWS SSM agent.'       
  references:
    - ISO27001:2013 - A.12.1.2
  links:
    - https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.ec2_describe_instances
    filter: "[?State.Name == 'running']"
    fields: " { _region: _region , InstanceId : InstanceId, ssm_InstanceId : ssm_InstanceId, ssm_PingStatus: ssm_PingStatus , State: State.Name, PrivateIpAddress: PrivateIpAddress}"
  policy: "[? ssm_InstanceId != InstanceId || ssm_PingStatus != `Online` ]"

ec2-with-instance-profiles:
  name: Ensure IAM instance roles are used for AWS resource access from instances
  description: AWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the AWS account they give access to. In contrast, in order to leverage role permissions an attacker would need to gain and maintain access to a specific instance to use the privileges associated with it.
  rating: Low
  vulnerability: AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. "AWS Access" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.
  remediation: Remove the access keys from any user account in use on an EC2 instance, and setup EC2 IAM Roles instead.
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=49
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
  references:
    - AWS CIS v.1.4.0 - 1.18
    - AWS CIS v.1.2.0 - 1.19
    - ISO27001:2013 - A.9.2.3
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.ec2_describe_instances
    fields: "{ _region: _region, InstanceId : InstanceId, IamInstanceProfile: IamInstanceProfile.Arn }"
  policy: "[? IamInstanceProfile == `null` ]"

minimum-password-length:
  name: Ensure IAM password policy requires minimum length of 14 or greater
  description: IAM Password Policy specifies the password complexity requirements for the AWS IAM users.
  rating: Medium
  vulnerability: Weak password policies will cause users to select weak, easy to guess passwords.
  remediation: 'Follow [AWS Best practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html) to set an IAM password policy.'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=20
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html
  references:
    - AWS CIS v.1.4.0 - 1.8
    - AWS CIS v.1.2.0 - 1.9
    - ISO27001:2013 - A.5.1.1
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_AccountPasswordPolicy
    fields: "{ key: key, value: value }"
    filter: "[? key == `minimum_password_length` ]"
  policy: "[? value <= `14` || value == `null` ]"

privilege-escalation:
  name: Privilege Escalation
  description: A **privilege escalation** risk is where a user account within a system has the ability to elevate their privileges to a higher level than what was originally intended.  This can have disastrous consequences, particularly if you have an insider threat.  This type of risk is not limited to insiders only.  Any user account with the right permissions can result in unwanted elevated permissions.
  rating: Critical
  vulnerability: Users, roles, or groups that have too-broad permissions applied can allow a seeminly benign user to allow themselves to have their access elevated.
  remediation: Review all user access, and reduce the permissions to the absolute bare minimum required to perform their required function.
  references:
    - ISO27001:2013 - A.9.2.3
  links:
    - https://www.awssecurity.info/blog/2021-12-30-privilege-escalation.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_list_policies
    fields: "{ source : source, UserName : UserName, GroupName: GroupName, RoleName : RoleName, PolicyName : PolicyName, Entity : Entity, Effect: Effect, Action: Action, Resource: Resource }"
  policy : "[? Effect == `Allow` && ( Action == `*` || Action == `lambda:*` || Action == `lambda:InvokeFunction` || Action == `lambda:CreateFunction` || Action == `iam:*` || Action == `iam:CreatePolicyVersion` || Action == `iam:SetDefaultPolicyVersion` || Action == `iam:PutRolePolicy` || Action == `iam:CreateAccessKey` || Action == `iam:CreateLoginProfile` || Action == `iam:UpdateLoginProfile` || Action == `iam:AttachUserPolicy` || Action == `iam:AttachGroupPolicy` || Action == `iam:AttachRolePolicy` || Action == `iam:PutUserPolicy` || Action == `iam:PutGroupPolicy` || Action == `iam:AddUserToGroup` || Action == `iam:UpdateAssumeRolePolicy` || Action == `ec2:*` || Action == `ec2:RunInstances` || Action == `glue:*` || Action == `glue:UpdateDevEndpoint` || Action == `glue:UpdateDevEndpoint` || Action == `cloudformation:*` || Action == `cloudformation:CreateStack` || Action == `datapipeline:*` || Action == `datapipeline:CreatePipeline` || Action == `datapipeline:PutPipelineDefinition` ) ]"

guardduty-enabled:
  name: GuardDuty must be enabled in all regions
  description: Amazon GuardDuty is a threat detection service that continuously monitors for malicious activity and unauthorized behavior to protect your AWS accounts, workloads, and data stored in Amazon S3.
  rating: Medium
  references:
    - ISO27001:2013 - A.12.4.1
  vulnerability: GuardDuty provides visibility on threats that may try to access your system.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_settingup.html) to enable GuardDuty on all regions.'    
  links:
    - https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_settingup.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.guardduty_list_detectors
    fields: "{ count : count, _region: _region }"
  policy : "[? count == `0` ]"

account-password-policy:
  name: Ensure IAM password policy is set to a strong password
  description: IAM Password Policy specifies the password complexity requirements for the AWS IAM users.
  rating: Medium
  vulnerability: Weak password policies will cause users to select weak, easy to guess passwords.
  remediation: 'Follow the [AWS Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html) to set an IAM Password Policy.1.5 Ensure IAM password policy requires at least one uppercase letter1.6 Ensure IAM password policy require at least one lowercase letter1.7 Ensure IAM password policy require at least one symbol1.8 Ensure IAM password policy require at least one number1.11 Ensure IAM password policy expires passwords within 90 days or less'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=20
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html
  references:
    - AWS CIS v.1.2.0 - 1.5
    - AWS CIS v.1.2.0 - 1.6
    - AWS CIS v.1.2.0 - 1.7
    - AWS CIS v.1.2.0 - 1.8
    - AWS CIS v.1.2.0 - 1.11
    - ISO27001:2013 - A.5.1.1
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_AccountPasswordPolicy
    fields: "{ key: key, value: value }"
    filter: "[? key == `require_uppercase_characters` || key == `require_lowercase_characters` || key == `require_numbers` || key == `require_symbols` || key == `max_password_age` ]"
  policy: "[? value == `false` || value == `null` || value < `90` ]"

password-reuse-prevention:
  name: Ensure IAM password policy prevents password reuse
  description: IAM Password Policy specifies the password complexity requirements for the AWS IAM users.
  rating: Medium
  vulnerability: Weak password policies will cause users to select weak, easy to guess passwords.
  remediation: 'Follow the [AWS Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html) to set an IAM Password Policy.'
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=20
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html
  references:
    - AWS CIS v.1.4.0 - 1.9
    - AWS CIS v.1.2.0 - 1.10
    - ISO27001:2013 - A.5.1.1
    - ISO27001:2013 - A.9.2.4
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.iam_AccountPasswordPolicy
    fields: "{ key: key, value: value }"
    filter: "[? key == `password_reuse_prevention` ]"
  policy: "[? value == `false` || value == `null` || value < `24` ]"

loggroups-without-retention:
  name: Log groups without retention policies
  description: CloudWatch is the monitoring service within AWS, used to provide feedback on the various states of different services.  By default, CloudWatch Logs will retain all information indefintely.
  rating: Info
  vulnerability: Without any sort of retention policy, your AWS accounts' log groups will grow to huge amounts, incurring additional cost for your organization.  There may also be regulatory requirements that dictate how long certain logs are to be retained.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#SettingLogRetention) to set log retention periods.'
  links:
    - https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#SettingLogRetention
  created: 2022-01-19
  updated: 2022-01-19
  references:
    - ISO27001:2013 - A.12.4.1
  asset:
    path: logs.describe_log_groups
    fields: "{ logGroupName: logGroupName, storedBytes: storedBytes, retentionInDays: retentionInDays }"
  policy: "[? retentionInDays == null ]"

s3-without-mfadelete:
  name: Ensure MFA Delete is enable on S3 buckets
  description: Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.
  vulnerability: Adding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.
  rating: Low
  remediation : 'Follow [AWS Best Pracices](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete) to enable MFA delete.'
  references:
    - AWS CIS v.1.4.0 - 2.1.3
    - ISO27001:2013 - A.9.3.1
  links:
    - 'https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete'
    - 'https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html'
    - 'https://aws.amazon.com/blogs/security/securing-access-to-aws-using-mfa-part-3/'
    - 'https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_lost-or-broken.html'
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.s3
    fields: '{ bucket: bucket , MFADelete: MFADelete, _region: _region }'
  policy: '[? MFADelete == `false`]'

s3-encrypted-at-rest:
  name: Ensure all S3 buckets employ encryption-at-rest
  description: Encrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.
  vulnerability: Amazon S3 buckets with default bucket encryption using SSE-KMS cannot be used as destination buckets for Amazon S3 server access logging. Only SSE-S3 default encryption is supported for server access log destination buckets.
  rating: Medium
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html) to configure encryption on S3 buckets.'
  references:
    - AWS CIS v.1.4.0 - 2.1.1
    - ISO27001:2013 - A.10.1.1
  links:
    - https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-related-resources
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.s3
    fields: '{ bucket: bucket , ApplyServerSideEncryptionByDefault: ApplyServerSideEncryptionByDefault, _region: _region }'
  policy: '[? ApplyServerSideEncryptionByDefault == `false` ]'

s3-block-public-access:
  name: Ensure that S3 Buckets are configured with Block public access (bucket settings)
  description: Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.
  vulnerability: Amazon S3 Block public access (bucket settings) prevents the accidental or malicious public exposure of data contained within the respective bucket(s). Amazon S3 Block public access (account settings) prevents the accidental or malicious public exposure of data contained within all buckets of the respective AWS account. Whether blocking public access to all or some buckets is an organizational decision that should be based on data sensitivity, least privilege, and use case.
  rating: Medium
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-account.html) to block public access.'
  references:
    - AWS CIS v.1.4.0 - 2.1.5
    - ISO27001:2013 - A.9.4.1
  links:
    - https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-account.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.s3
    fields: '{ bucket: bucket , BlockPublicAcls : BlockPublicAcls , IgnorePublicAcls : IgnorePublicAcls, BlockPublicPolicy : BlockPublicPolicy, RestrictPublicBuckets: RestrictPublicBuckets, _region: _region }'
  policy: '[? BlockPublicAcls == `false` || IgnorePublicAcls == `false` || BlockPublicPolicy == `false` || RestrictPublicBuckets == `false` ]'

s3-publically-accessable:
  name: S3 buckets must not be publicly accessible
  description: S3 is a core storage solution from AWS.  It is used in most services, and provides an secure and scalable storage solution for your application.  If configured correctly, S3 can host highly sensitive information.  Publically accessible S3 buckets will allow anyone on the internet to access any data stored in a S3 bucket
  vulnerability: Data within the bucket could be exposed, resulting in a loss of confidentiality.  When other files (for example web site images) are stored, there is a risk that another website may be using your resources by linking to the public bucket, incurring additional charges to your account.  An attacker may be able to modify sensitive data (for example updating an invoice to be paid with new bank details).  An attacker may be able to inject their own data into the bucket (for example submitting a fake order through an EDI system).  An attacker may be able to delete sensitive data, resulting in a system outage.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access.html) to remediate the publically exposed bucket.'
  rating: High
  references:
    - Trusted Advisor - Amazon S3 bucket permissions
    - ISO27001:2013 - A.9.4.1
  links:
    - https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access.html
    - https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/#Security
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.s3
    fields: '{ bucket: bucket, list_objects: list_objects, list_objects_v2: list_objects_v2, get_bucket_location: get_bucket_location, get_bucket_logging:get_bucket_logging, get_bucket_acl:get_bucket_acl, _region:_region }'
  policy: '[? list_objects != `false` || list_objects_v2 != `false` || get_bucket_location != `false` || get_bucket_logging != `false` || get_bucket_acl != `false` ]'

ebs-volume-encrypted-by-default:
  name: Ensure EBS volume encryption is enabled by default
  description: Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.
  vulnerability: Encrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.
  rating: Low
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) to setup EBS encryption.'
  references:
    - AWS CIS v.1.4.0 - 2.2.1
    - ISO27001:2013 - A.12.3.1
  links:
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html
    - https://aws.amazon.com/blogs/aws/new-opt-in-to-default-encryption-for-new-ebs-volumes/
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.get_ebs_encryption_by_default
    fields: ' { EbsEncryptionByDefault:EbsEncryptionByDefault, _region: _region }'
  policy: '[? EbsEncryptionByDefault != `true` ]'

ebs-snapshots-not-encrypted:
  name: EBS snapshots are not encrypted
  description: EBS snapshots may contain sensitive data that has been backed up from EC2 instances.
  vulnerability: Encrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.
  rating: Medium
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) to setup EBS encryption.'
  references:
    - ISO27001:2013 - A.12.3.1
  links:
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html
    - https://aws.amazon.com/blogs/compute/must-know-best-practices-for-amazon-ebs-encryption/
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.describe_snapshots
    fields: '{ SnapshotId: SnapshotId, OwnerId: OwnerId, Encrypted: Encrypted, State: State, _region: _region }'
    filter: '[? State == `completed`]'
  policy: '[? Encrypted != `false` ]'

ebs-snapshots-older-than-90-days:
  name: EBS snapshots older than 90 days
  description: EBS snapshots take up a lot of space, and they also cost money.  If you do not have a data retention process in place, you may accumulate a lot of data that you need to pay for.
  rating: Info
  vulnerability: By not cleaning up old EBS snapshots, you will incur additional charges from AWS.
  remediation: 'Create a [snapshot lifecycle policy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html).'
  references:
    - ISO27001:2013 - A.12.3.1
  links:
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.describe_snapshots
    fields: '{ SnapshotId: SnapshotId, OwnerId: OwnerId, _StartTime_ageDays: _StartTime_ageDays, State: State, _region: _region }'
    filter: '[? State == `completed`]'
  policy: '[? _StartTime_ageDays > `90` ]'

rotate-kms-encryption-keys:
  name: Ensure rotation for customer created CMKs is enabled
  references:
    - AWS CIS v.1.4.0 - 3.8
    - AWS CIS v.1.2.0 - 2.8
    - ISO27001:2013 - A.10.1.2
  description: Rotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed.
  vulnerability: By not rotating encryption keys, there is a higher likelihood of data compromize due to improper management of secret keys.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html) to rotate keys.'
  rating: Medium
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=82
    - https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html
  created: 2022-01-19
  updated: 2022-01-19
  asset:
    path: custom.get_key_rotation_status
    fields: '{ _keyId: _keyId, _region: _region, _status: _status }'
  policy: '[? _status != `true` ]'

access-analyzer-enabled:
  name: Ensure that IAM Access analyzer is enabled for all regions.
  description: IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.
  vulnerability: AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.
  rating: Medium
  remediation: Follow '[AWS Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html) to enable access analyzer.'
  references:
    - AWS CIS v.1.4.0 - 1.20
    - ISO27001:2013 - A.9.2.5
  links:
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html
    - https://docs.aws.amazon.com/cli/latest/reference/accessanalyzer/get-analyzer.html
    - https://docs.aws.amazon.com/cli/latest/reference/accessanalyzer/create-analyzer.html
  created: 2022-01-20
  updated: 2022-01-20
  asset:
    path: custom.accessanalyzer_list_analyzers
    fields: '{ arn: arn, status: status, _region: _region }'
  policy: '[? status != `ACTIVE` ]'

config-must-be-enabled:
  name: Ensure AWS Config is enabled in all regions
  description: The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/config/latest/developerguide/gs-console.html) to enable AWS Config in all regions.'
  vulnerability: Without AWS Config enabled, technical teams will struggle to identify the historical changes to resources when the need arise for forensic investigation.
  rating: High
  references:
    - AWS CIS v.1.4.0 - 3.5
    - AWS CIS v.1.2.0 - 2.5
    - ISO27001:2013 - A.12.7.1
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=72
    - https://docs.aws.amazon.com/config/latest/developerguide/gs-console.html
  created: 2022-01-25
  updated: 2022-01-25
  asset:
    path: custom.describe_configuration_recorders
    fields: '{ name: name, allSupported: recordingGroup.allSupported, includeGlobalResourceTypes: recordingGroup.includeGlobalResourceTypes, recording: describe_configuration_recorder_status.recording, _region: _region }'
  policy: '[? allSupported != `true` || includeGlobalResourceTypes != `true` || recording != `true` ]'

restrict-default-security-group:
  name: Ensure the default security group of every VPC restricts all traffic
  description: Configuring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.
  vulnerability: The default security group allows very open permissions, and could inadvertently be applied to a resource, exposing that resource to the internet.
  remediation: Remove any rules from the default security group.
  rating: Low
  references:
    - AWS CIS v.1.4.0 - 5.3
    - AWS CIS v.1.2.0 - 4.3
    - ISO27001:2013 - A.13.1.3
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=148
  created: 2022-01-30
  updated: 2022-01-30
  asset:
    path: custom.ec2_describe_security_groups
    fields: "{ _direction: _direction, GroupId: GroupId, GroupName: GroupName, FromPort: FromPort, ToPort: ToPort, IpProtocol: IpProtocol, IpRange: IpRange }"
    filter: "[? GroupName == `default` ]"
  policy: "[? GroupName == `default` ]"

vpc-flowlogs-enabled:
  name: Ensure VPC flow logging is enabled in all VPCs
  description: VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.
  vulnerability: Without VPC Flow Logs, technical teams will not have visibility on how network traffic flows.
  remediation: 'Follow [AWS Best Practices](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html) to enable VPC Flow Logs.'
  rating: Low
  references:
    - AWS CIS v.1.4.0 - 3.9
    - AWS CIS v.1.2.0 - 2.9
    - ISO27001:2013 - A.13.1.1
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=84
    - https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html
  created: 2022-01-30
  updated: 2022-01-30
  asset:
    path: custom.ec2_describe_vpcs
    fields: '{ VpcId: VpcId, CidrBlock: CidrBlock, _region: _region, LogGroupName : describe_flow_logs.LogGroupName } '
  policy: '[? LogGroupName == `null` ]'

cloudtrail-storing-to-s3:
  name: Ensure CloudTrail is storing evidence to an S3 bucket
  description: The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing.  The logs hvae to be stored to allow for security investigations to continue unhindered.
  rating: Medium
  vulnerability: Without proper logging of AWS API activity, any activity, be it malicious, or legitimate will go undetected, resulting in breaches, or lack of regulatory compliance.
  remediation: Follow <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html">AWS Best Practices</a> to create a new trail.
  links:
    - https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=61
    - https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html
    - https://aws.amazon.com/premiumsupport/technology/trusted-advisor/best-practice-checklist/#Security
  references:
    - AWS CIS v.1.4.0 - 3.1
    - AWS CIS v.1.2.0 - 2.1
    - Trusted Advisor - AWS Cloudtrail logging
    - ISO27001:2013 - A.12.4.1
  created: 2022-01-30
  updated: 2022-01-30
  asset:
    path: custom.cloudtrail_describe_trails
    fields: "{ Name: Name, _region: _region, S3BucketName: S3BucketName}"
  policy: "[? S3BucketName == `null`]"