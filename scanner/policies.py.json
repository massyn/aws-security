[
      {
            "name" : "Subnets should not issue public IP addresses",
            "description" : "Defence-in-depth suggests that multiple security controls must be implemented to properly protect a system.  Removing the assignment of public IP addresses is one strategy that can be deployed to reduce the risk.</p><p>By allocating public IP addresses in subnets, any new system being created (database or EC2 instance) could inadvertantly be exposed to the public internet.</p><p>Instead of simply giving EC2 instances public IP addresses, the solution must be designed in a way to utilize load balancers instead.  Note that the subnet where you place a load balancer will need to have the ability to issue public IP addresses. Consider creating a load balancer with a public IP before you remove the functionality.",
            "vulnerability" : "Automated issuing of public IP addresses increases the risk of internet exposure to your instances.",
            "severity" : "info",
            "remediation" : "Execute the <a href=\"https://github.com/massyn/aws-security/blob/main/remediation/remediate_subnets_with_public_ip_assignment.py\">remediation script</a> within your AWS account to remediate all subnets.</p><p><b>WARNING:</b> The script will cause all subnets in all regions to stop issuing public IP addresses.  If you need this functionality for things like autoscaling, this script can potentially break your solution.",
            "references" : [
                  "ASI.NET.001"
            ],
            "links" : [
                  "https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html#AddaSubnet"
            ],
            "source" : "ec2.describe_subnets",
            "filter" : "[?MapPublicIpOnLaunch == `true`].[{ SubnetId :SubnetId, AvailabilityZone : AvailabilityZone }]"
      },
      {
            "name" : "Lambda functions with depreciated runtimes",
            "description" : "Lambda will no longer apply security patches and other updates to the runtime used by Lambda functions. In addition, functions using the runtime will no longer be eligible for technical support. You will no longer be able to create new Lambda functions using the runtime.",
            "vulnerability" : "AWS strongly recommends that you migrate functions to a supported runtime version so that you continue to receive security patches and remain eligible for technical support.",
            "severity" : "medium",
            "remediation" : "Follow <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-console.html\">AWS Best Practices</a> to update the Lambda runtime.",
            "references" : [
                  "ASI.INF.001"
            ],
            "links" : [
                  "https://docs.aws.amazon.com/lambda/latest/dg/runtime-support-policy.html"
            ],
            "source" : "lambda.list_functions",
            "filter" : "[?Runtime == `nodejs8.10` || Runtime == `nodejs6.10` || Runtime == `nodejs4.3-edge` || Runtime == `nodejs4.3` || Runtime == `nodejs` || Runtime == `dotnetcore2.0` || Runtime == `dotnetcore1.0`].[{ FunctionName : FunctionName, Runtime : Runtime, Region : _region }]"
      },
      {
            "name" : "Eliminate use of the root user for administrative and daily tasks",
            "description" : "The <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\">root user</a> is the highest privileged, unrestricted account within your AWS landscape.  Because of the sensitivity of this account, it should not be used for normal day-to-day operations.",
            "vulnerability" : "The root account represents unrestricted access to the entire account.  A compromise of the root account will mean a complete loss control of the account.  This can result in data leakage, or rogue resources being created (for example bitcoin mining), at the account owner\"s expense.",
            "remediation" : "Avoid using the root account, and <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\">create a seperate IAM user</a> with the least-privilege policies applied.",
            "severity" : "high",
            "links" : [
                  "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html",
                  "https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=11"
            ],
            "references" : [
                  "AWS CIS v1.4.0 - 1.7",
                  "AWS CIS v1.2.0 - 1.1"
            ],
            "source" : "iam.get_credential_report[?user == `<root_account>`]",
            "filter" : "[?_password_last_used_age < `90`].[{ UserName : user , password_last_used : password_last_used }]"
      },
      {
            "name" : "Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
            "description" : "In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations",
            "vulnerability" : "Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.",
            "remediation" : "Follow the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html\">AWS best practices</a> to setup SSO.",
            "severity" : "low",
            "links" : [
                  "https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html"
            ],
            "references" : [
                  "AWS CIS v.1.4.0 - 1.21"
            ],
            "source" : "iam.get_credential_report[?user != `<root_account>`]",
            "filter" : "[?password_enabled == 'true'].[{ UserName : user , password_enabled : password_enabled , password_last_used : password_last_used }]"
      },
      {
            "name" : "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
            "description" : "MFA (or <a href=\"https://en.wikipedia.org/wiki/Multi-factor_authentication\">multi factor authentication</a>) refers to using an additional factor (like a security fob or a one-time password), in addition to the regular username and password to gain access to an account.",
            "vulnerability" : "Without MFA, there is a higher probability of the account being compromised.",
            "remediation" : "Follow the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html\">AWS best practices</a> to configure MFA on your root account.",
            "severity" : "high",
            "links" : [
                  "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html",
                  "https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf#page=13"
            ],
            "references" : [
                  "AWS CIS v.1.4.0 - 1.10",
                  "AWS CIS v.1.2.0 - 1.2"
            ],
            "source" : "iam.get_credential_report[?user != `<root_account>` && password_enabled == 'true']",
            "filter" : "[?mfa_active != 'true'].[{ UserName : user , mfa_active : mfa_active , password_last_used : password_last_used }]"
      },
      {
            "name" : "EC2 instance with a public IP address",
            "description" : "EC2 instances with public IP addresses are more exposed to the internet.  Even when a system only has limited ports open, the protection then shifts to the application.",
            "vulnerability" : "By not restricting an EC2 instance behind a load balancer, the entire subnet is being put at risk in the event of a system or application compromise.",
            "remediation" : "Implement a secure design, placing all EC2 instances in private subnets, and segregate the internet access with a load balancer and (or) a WAF",
            "links" : [
                  "https://aws.amazon.com/architecture/well-architected/"
            ],
            "references" : [
                  "ASI.NET.004"
            ],
            "source" : "ec2.describe_instances[?State.Name == 'running']",
            "filter" : "[?PublicIpAddress != `null`][ {InstanceId : InstanceId , AvailabilityZone : Placement.AvailabilityZone, PublicIpAddress : PublicIpAddress}]"
      }

]