{
    "AWSTemplateFormatVersion"  : "2010-09-09",
    "Description"               : "AWS Security Info - Automated security scan",
    "Parameters" : {
        "vpcCIDR" : {
            "Type" : "String",
            "Default" : "10.0.0.0/16",
            "Description" : "The CIDR address range for the VPC."
        },
        "subnetCIDR" : {
            "Type" : "String",
            "Default" : "10.0.0.0/24",
            "Description" : "The CIDR address range for the subnet."
        },
        "s3Bucket" : {
            "Type" : "String",
            "Default" : "Replace this with a unique S3 bucket name",
            "Description" : "Create a new S3 bucket where the reports will be stored."
        },
        "ImageId" : {
            "Type" : "String",
            "Default" : "ami-0c2b8ca1dad447f8a",
            "Description" : "This AMI is only valid in us-east-1.  Should you run in another region, you need to update it."
        },
        "SlackWebhook" : {
            "Type" : "String",
            "Description" : "Provide a Slack Webhook if you want to get feedback through a Slack channel on the outcome of the scanner."
        }
    },
    "Resources" : {
        "myIGW" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {}
         },
        "myVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "vpcCIDR"},
                "EnableDnsHostnames" : true,
                "EnableDnsSupport" : true,
                "InstanceTenancy" : "default"
            }
        },
        "myIGWtoVPCattachment" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : "myVPC",
            "Properties" : {
                "InternetGatewayId" : { "Ref" : "myIGW"},
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "myRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : "myVPC",
            "Properties" : {
               "VpcId" : { "Ref" : "myVPC" }
            }
        },
        "myRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "myIGW",
            "Properties" : {
               "RouteTableId" : { "Ref" : "myRouteTable" },
               "DestinationCidrBlock" : "0.0.0.0/0",
               "GatewayId" : { "Ref" : "myIGW"}
            }
        },
        "mySubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "myVPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "subnetCIDR"},
                "MapPublicIpOnLaunch" : true,
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "mySubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "myRouteTable" },
                "SubnetId" : { "Ref" : "mySubnet" }
              }
        },
        "myEC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "myEC2Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:GenerateCredentialReport",
                                    "Resource": "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : "s3:PutObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "", [ "arn:aws:s3:::", { "Ref": "myS3Bucket" }, "/*" ] ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                    "arn:aws:iam::aws:policy/ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/SecurityAudit"
                ]
            },
            "DependsOn" : "myS3Bucket"
        },
        "myEC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "myEC2Role"
                    }
                ]
            }
        },
        "myS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": { "Ref" : "s3Bucket" },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            },
                            "BucketKeyEnabled": true
                        }
                    ]
                }
            }
        },
        "myLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName" : "LambdaPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            { "Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream" , "logs:PutLogEvents"], "Resource": "arn:aws:logs:*:*:*" },
                            { "Effect": "Allow", "Action": ["ec2:RequestSpotInstances", "iam:PassRole" ] , "Resource" : "*" }
                        ]
                    }
                }]
            }
        },
        "mySecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Spot instance outbound connections",
                "GroupName" : "mySecurityGroup",
                "SecurityGroupEgress" : [ {
                    "CidrIp" : "0.0.0.0/0",
                    "Description" : "Outbound traffic",
                    "FromPort" : 0,
                    "IpProtocol" : "-1",
                    "ToPort" : 65535
                  } ],
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "myLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": { "Fn::GetAtt": [ "myLambdaExecutionRole", "Arn" ] },
                "Description" : "AWS Security Info - spawn a spot instance",
                "Code": {
                    "ZipFile": "# This is the code embedded in the automated Lambda function\nimport boto3\nimport base64\nimport os\nimport json\ndef lambda_handler(event, context):\n    \n    IamInstanceProfile  = os.environ['IamInstanceProfile']\n    ImageId             = os.environ['ImageId']\n    SecurityGroup       = os.environ['SecurityGroup']\n    SubnetId            = os.environ['SubnetId']\n    S3Bucket            = os.environ['S3Bucket']\n    SlackWebhook        = os.environ['SlackWebhook']\n    \n    print('IamInstanceProfile   = ' + IamInstanceProfile)\n    print('ImageId              = ' + ImageId)\n    print('SecurityGroup        = ' + SecurityGroup)\n    print('SubnetId             = ' + SubnetId)\n    print('S3Bucket             = ' + S3Bucket)\n    print('SlackWebhook         = ' + SlackWebhook)\n    UserData = '''#!/bin/bash\nexport instanceId=`curl -q http://169.254.169.254/latest/dynamic/instance-identity/document |grep instanceId | awk {'print \\$3'} | cut -b 2-20`\n[[ ! -z \"{SlackWebhook}\" ]] && /usr/bin/curl -X POST -H 'Content-type: application/json' --data '{\"text\":\":racing_motorcycle: AWS Security Info instance $instanceId has been created.\"}' {SlackWebhook}\nexport dte=`date '+%Y/%m/%d'`\nyum update -y\nyum install python3 -y\nyum install git -y\nyum install awscli -y\npip3 install boto3\ncd /tmp\nmkdir /tmp/secreport\ngit clone http://github.com/massyn/aws-security\npython3 aws-security/scanner/scanner.py --json /tmp/secreport/%a.json --html /tmp/secreport/%a.html --slack {SlackWebhook} > /tmp/secreport/output.log 2>&1\naws s3 cp /tmp/secreport/ s3://{S3Bucket}/$dte/ --recursive\n# -- do a shutdown now\n#shutdown now\n'''.format(S3Bucket = S3Bucket, SlackWebhook = SlackWebhook)\n    instance = boto3.client(\n        'ec2',\n        region_name = 'us-east-1'\n    ).request_spot_instances(\n        InstanceCount=1,\n        LaunchSpecification={\n            'BlockDeviceMappings': [\n                {\n                    'DeviceName' : '/dev/xvda',\n                    'Ebs': {\n                        'DeleteOnTermination': True,\n                        'VolumeSize': 8,\n                        'VolumeType': 'gp2'\n                    }\n                }\n            ],\n            'IamInstanceProfile': { 'Name': IamInstanceProfile },\n            'ImageId': ImageId,\n            'InstanceType': 't2.micro',\n            'NetworkInterfaces': [\n                {\n                    'DeviceIndex' : 0,\n                    'AssociatePublicIpAddress': True,\n                    'DeleteOnTermination': True,\n                    'Groups': [ SecurityGroup ],\n                    'SubnetId' : SubnetId\n                },\n            ],\n            'Placement': { 'Tenancy': 'default' },\n            'UserData': base64.b64encode(UserData.encode('ascii')).decode('ascii'),\n        },\n        Type='one-time',\n        InstanceInterruptionBehavior='terminate'\n    )\n    print(instance)\n    return { 'statusCode': 200, 'body': 'ok' }\n"
                },
                "Runtime": "python3.8",
                "Timeout": 25,
                "TracingConfig": { "Mode": "Active" },
                "Environment" : {
                    "Variables" : {
                        "ImageId"               : { "Ref" : "ImageId" },
                        "SlackWebhook"          : { "Ref" : "SlackWebhook" },
                        "S3Bucket"              : { "Ref" : "s3Bucket" },
                        "IamInstanceProfile"    : { "Ref" : "myEC2InstanceProfile"},
                        "SecurityGroup"         : { "Ref" : "mySecurityGroup" },
                        "SubnetId"              : { "Ref" : "mySubnet"}
                    }
                }
            }
        }
    }
}