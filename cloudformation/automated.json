{
    "AWSTemplateFormatVersion"  : "2010-09-09",
    "Description"               : "AWS Security Info - Automated security scan",
    "Parameters" : {
        "vpcCIDR" : {
            "Type" : "String",
            "Default" : "10.0.0.0/16",
            "Description" : "The CIDR address range for the VPC."
        },
        "subnetCIDR" : {
            "Type" : "String",
            "Default" : "10.0.0.0/24",
            "Description" : "The CIDR address range for the subnet."
        },
        "s3Bucket" : {
            "Type" : "String",
            "Default" : "Replace this with a unique S3 bucket name",
            "Description" : "Create a new S3 bucket where the reports will be stored.",
            "AllowedPattern" : ".+"
        },
        "ImageId" : {
            "Type" : "String",
            "Default" : "ami-0c2b8ca1dad447f8a",
            "Description" : "This AMI is only valid in us-east-1.  Should you run in another region, you need to update it."
        },
        "cron" : {
            "Type" : "String",
            "Default" : "cron(0 12 * * ? *)",
            "Description" : "Specify the schedule at which the event will trigger."
        }
    },
    "Resources" : {
        "myIGW" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {}
         },
        "myVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "vpcCIDR"},
                "EnableDnsHostnames" : true,
                "EnableDnsSupport" : true,
                "InstanceTenancy" : "default"
            }
        },
        "myIGWtoVPCattachment" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : "myVPC",
            "Properties" : {
                "InternetGatewayId" : { "Ref" : "myIGW"},
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "myRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : "myVPC",
            "Properties" : {
               "VpcId" : { "Ref" : "myVPC" }
            }
        },
        "myRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "myIGW",
            "Properties" : {
               "RouteTableId" : { "Ref" : "myRouteTable" },
               "DestinationCidrBlock" : "0.0.0.0/0",
               "GatewayId" : { "Ref" : "myIGW"}
            }
        },
        "mySubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "myVPC",
            "Properties" : {
                "CidrBlock" : { "Ref" : "subnetCIDR"},
                "MapPublicIpOnLaunch" : true,
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "mySubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "myRouteTable" },
                "SubnetId" : { "Ref" : "mySubnet" }
              }
        },
        "myEC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "myEC2Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [ "iam:GenerateCredentialReport", "sts:AssumeRole" ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : "s3:PutObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "", [ "arn:aws:s3:::", { "Ref": "myS3Bucket" }, "/*" ] ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                    "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess",
                    "arn:aws:iam::aws:policy/SecurityAudit"
                ]
            },
            "DependsOn" : "myS3Bucket"
        },
        "myEC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "myEC2Role"
                    }
                ]
            }
        },
        "myS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": { "Ref" : "s3Bucket" },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            },
                            "BucketKeyEnabled": true
                        }
                    ]
                }
            }
        },
        "myLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName" : "LambdaPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            { "Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream" , "logs:PutLogEvents"], "Resource": "arn:aws:logs:*:*:*" },
                            { "Effect": "Allow", "Action": ["ec2:RunInstances", "iam:PassRole" ] , "Resource" : "*" }
                        ]
                    }
                }]
            }
        },
        "mySecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Spot instance outbound connections",
                "GroupName" : "mySecurityGroup",
                "SecurityGroupEgress" : [ {
                    "CidrIp" : "0.0.0.0/0",
                    "Description" : "Outbound traffic",
                    "FromPort" : 0,
                    "IpProtocol" : "-1",
                    "ToPort" : 65535
                  } ],
                "VpcId" : { "Ref" : "myVPC"}
            }
        },
        "myLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": { "Fn::GetAtt": [ "myLambdaExecutionRole", "Arn" ] },
                "Description" : "AWS Security Info - spawn a spot instance",
                "Code": {
                    "ZipFile":  { "Fn::Join": ["\n", [
                        "import os",
                        "import boto3",
                        "def lambda_handler(event, context):",
                        "    LaunchTemplateId    = os.environ['LaunchTemplateId']",
                        "    LatestVersionNumber = os.environ['LatestVersionNumber']",
                        "    region = os.environ['AWS_REGION']",
                        "    instance = boto3.client('ec2',region_name = region).run_instances(",
                        "        LaunchTemplate={",
                        "            'LaunchTemplateId': LaunchTemplateId,",
                        "            'Version': LatestVersionNumber",
                        "        },",
                        "        MaxCount=1,",
                        "        MinCount=1,",
                        "        InstanceMarketOptions={",
                        "            'MarketType': 'spot',",
                        "            'SpotOptions': {",
                        "                'SpotInstanceType': 'one-time',",
                        "                'InstanceInterruptionBehavior': 'terminate'",
                        "            }",
                        "        }",
                        "    )",
                        "    print(instance)",
                        "    return { 'statusCode': 200, 'body': 'ok' }"
                    ]]}
                },
                "Runtime": "python3.8",
                "FunctionName": { "Fn::Sub": "${AWS::StackName}-AWSSecurityTrigger" },
                "Timeout": 25,
                "TracingConfig": { "Mode": "Active" },
                "Environment" : {
                    "Variables" : {
                        "LaunchTemplateId"      : { "Ref" : "myLaunchTemplate"},
                        "LatestVersionNumber"   : { "Fn::GetAtt" : [ "myLaunchTemplate", "LatestVersionNumber" ] }
                    }
                }
            }
        },
        "myEventSchedule" : {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Scheduled event to trigger the Lambda function",
                "ScheduleExpression" : { "Ref" : "cron" },
                "State": "ENABLED",
                "Targets": [{ 
                    "Arn": { "Fn::GetAtt": [ "myLambdaFunction", "Arn" ] },
                    "Id" : { "Fn::Sub": "${AWS::StackName}-AWSSecurityTrigger" }
                } ]
            }
        },
        "myEventPermissions" : {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "myLambdaFunction" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["myEventSchedule", "Arn"] }
            }
        },
        "myLaunchTemplate":{
            "Type":"AWS::EC2::LaunchTemplate",
            "Properties":{
                "LaunchTemplateData" : {
                    "BlockDeviceMappings": [{
                        "DeviceName" : "/dev/xvda",
                        "Ebs": {
                            "DeleteOnTermination": true,
                            "VolumeSize": 8,
                            "VolumeType" : "gp2"
                        }
                    }],
                    "NetworkInterfaces": [{
                        "DeviceIndex"                   : 0,
                        "AssociatePublicIpAddress"      : true,
                        "DeleteOnTermination"           : true,
                        "Groups"                        : [ {"Ref" : "mySecurityGroup"} ],
                        "SubnetId"                      : {"Ref" : "mySubnet"} 
                    }],
                    "IamInstanceProfile"                : { "Arn":{"Fn::GetAtt": ["myEC2InstanceProfile", "Arn"] } },
                    "ImageId"                           : { "Ref" : "ImageId"},
                    "InstanceType"                      : "t2.micro",
                    "InstanceInitiatedShutdownBehavior" : "terminate",
                    "UserData" : {
                        "Fn::Base64" : {
                            "Fn::Join" : [ "", [
                                "#!/usr/bin/bash\n",
                                "export dte=`date '+%Y/%m/%d'`\n",
                                "yum update -y\n",
                                "yum install python3 git awscli -y\n",
                                "cd /tmp\n",
                                "mkdir /tmp/secreport\n",
                                "git clone http://github.com/massyn/aws-security\n",
                                "pip3 install -r /tmp/aws-security/requirements.txt\n",
                                "python3 aws-security/scanner/scanner.py --collect /tmp/secreport/%a.json --report s3://", {"Ref" : "s3Bucket" },"/$dte/%a.html > /tmp/secreport/output.log 2>&1\n",
                                "aws s3 cp /tmp/secreport/ s3://" , {"Ref" : "s3Bucket" } , "/$dte/ --recursive\n",
                                "#shutdown now\n"
                            ] ]
                        }
                    }
                }
            }
        }
    }
}