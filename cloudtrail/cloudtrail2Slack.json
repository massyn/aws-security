{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Monitor CloudTrail in real-time, and send alerts to Slack",
    "Parameters": {
        "SLACKWEBHOOK": {
          "Description" : "URL of the Slack Webhook",
          "Type": "String"
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName" : { "Fn::Sub": "${AWS::StackName}-Role-CloudTrail2Slack" },
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "CloudwatchLogs",
                    "PolicyDocument": {
                        "Statement": [ {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:GetLogEvents",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [ "arn:aws:logs:*:*:*" ],
                            "Effect": "Allow"
                        }]
                    }
                }],
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Action": [ "sts:AssumeRole" ],
                        "Effect": "Allow",
                        "Principal": { "Service": [ "lambda.amazonaws.com" ] }
                    }]
                }
            }
        },
        "LambdaFunction":{
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code": {
                    "ZipFile": "import json\nimport os\nimport urllib.request\nimport urllib.parse\ndef sendSlackMessage(message):\n    print('Slack -- ' + message)\n    req = urllib.request.Request(\n        os.environ['SLACK_WEBHOOK'],\n        json.dumps({'text': message}).encode('utf-8'),\n        {'Content-Type': 'application/json'}\n    )\n    resp = urllib.request.urlopen(req)\n    return resp.read()\ndef handler(event, context):\n    # -- CloudWatch via Lambda\n    try:\n        msg = ':warning: *CloudWatch Alert* - {account} ({awsRegion}) - {eventSource} = *{eventName}* - {resource}'.format(\n            account = event.get('account',''),\n            eventSource = event.get('detail',{}).get('eventSource',''),\n            eventName = event.get('detail',{}).get('eventName',''),\n            awsRegion = event.get('detail',{}).get('awsRegion',''),\n            resource = event.get('detail',{}).get('requestParameters',{}).get('groupId',''),\n        )\n        sendSlackMessage(msg)\n    except:\n        sendSlackMessage(json.dumps(event,indent=4))\n    return {\n        'statusCode': 200\n    }\n"
                },
                "Description" : "Send a message to Slack",
                "Environment" : { "Variables" : { "SLACK_WEBHOOK" : {"Ref" : "SLACKWEBHOOK"} }},
                "FunctionName": { "Fn::Sub": "${AWS::StackName}-Lambda-CloudTrail2Slack" },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role": { "Fn::GetAtt": [ "LambdaExecutionRole", "Arn" ] },
                "Runtime" : "python3.8",
                "Timeout" : 3
            },
            "DependsOn": [ "LambdaExecutionRole" ]
        },
        
        "RuleRootAccess": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "AWS Console root Sign In activity",
                "EventPattern": {
                    "detail-type": [ "AWS Console Sign In via CloudTrail" ],
                    "detail": {
                        "userIdentity": { 
                            "type": [ "Root" ]
                        }
                    }
                },
                "Name": { "Fn::Sub": "${AWS::StackName}-Rule-RootAccess" },
                "State": "ENABLED",
                "Targets": [{ "Arn": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }, "Id" : { "Fn::Sub": "${AWS::StackName}-LambdaFunction" } } ]
            }
        },
        "PermissionForEventsToInvokeLambdaRootAccess": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "LambdaFunction" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["RuleRootAccess", "Arn"] }
            }
        },

        "RuleAuthorizeSecurityGroupIngress": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Changes to inbound security groups",
                "EventPattern": {
                    "source": [ "aws.ec2" ],
                    "detail-type": [ "AWS API Call via CloudTrail" ],
                    "detail": {
                        "eventSource": [ "ec2.amazonaws.com" ],
                        "eventName": [ "AuthorizeSecurityGroupIngress" ]
                    }
                },
                "Name": { "Fn::Sub": "${AWS::StackName}-Rule-AuthorizeSecurityGroupIngress" },
                "State": "ENABLED",
                "Targets": [{ "Arn": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }, "Id" : { "Fn::Sub": "${AWS::StackName}-LambdaFunction" } } ]
            }
        },
        "PermissionForEventsToInvokeLambdaAuthorizeSecurityGroupIngress": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "LambdaFunction" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["RuleAuthorizeSecurityGroupIngress", "Arn"] }
            }
        },
        "RuleIAMUserPermissionCreep": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "IAM User Permission Creep",
                "EventPattern": {
                    "detail-type": [
                        "AWS API Call via CloudTrail"      
                    ],
                    "detail": {
                        "eventSource": [
                            "iam.amazonaws.com"
                        ],
                        "eventName": [
                            "AddUserToGroup",
                            "AttachUserPolicy"
                        ]
                    }
                },
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-Rule-IAMUserPermissionCreep"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": {
                            "Fn::Sub": "${AWS::StackName}-LambdaFunction"
                        }
                    }
                ]
            }
        },
        "PermissionForEventsToInvokeLambdaIAMUserPermissionCreep": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "RuleIAMUserPermissionCreep",
                        "Arn"
                    ]
                }
            }
        }
    }
}